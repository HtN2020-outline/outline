{"version":3,"sources":["popup/index.js","App.js","serviceWorker.js","index.js"],"names":["pageStyles","makeStyles","theme","root","height","width","PopupPage","props","classes","React","useState","name","setName","email","setEmail","file","setFile","onChangeHandler","event","currentTarget","value","className","TextField","id","label","variant","onChange","style","display","margin","handleFiles","files","base64","fileTypes","href","download","onClick","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2NAQMA,EAAaC,aAAW,SAACC,GAAD,MAAY,CACxCC,KAAM,CACJC,OAAQ,OACRC,MAAO,YA8EIC,MA1Ef,SAAmBC,GACjB,IAAMC,EAAUR,IADQ,EAGFS,IAAMC,SAAS,MAHb,mBAGnBC,EAHmB,KAGbC,EAHa,OAIAH,IAAMC,SAAS,MAJf,mBAInBG,EAJmB,KAIZC,EAJY,OAKFL,IAAMC,SAAS,MALb,mBAKnBK,EALmB,KAKbC,EALa,OAOJP,IAAMC,SAAS,MAPX,mBASlBO,GATkB,UASA,SAACC,GAAW,IAAD,EACTA,EAAMC,cAAtBR,EADyB,EACzBA,KAAMS,EADmB,EACnBA,MAED,aAATT,EACFC,EAAQQ,GACU,cAATT,GACTG,EAASM,KAiBb,OACE,sBAAKC,UAAWb,EAAQL,KAAxB,UACE,cAACmB,EAAA,EAAD,CACEC,GAAG,iBACHC,MAAM,OACNC,QAAQ,WACRd,KAAK,WACLS,MAAOT,EACPe,SAAU,SAACR,GAAD,OAAWD,EAAgBC,IACrCG,UAAU,yBACVM,MAAO,CAAEC,QAAS,OAAQC,OAAQ,uBAEpC,cAACP,EAAA,EAAD,CACEC,GAAG,iBACHC,MAAM,QACNC,QAAQ,WACRd,KAAK,YACLS,MAAOP,EACPa,SAAU,SAACR,GAAD,OAAWD,EAAgBC,IACrCG,UAAU,yBACVM,MAAO,CAAEC,QAAS,OAAQC,OAAQ,uBASpC,cAAC,IAAD,CAAiBC,YAjCD,SAAAC,GAClBf,EAAQe,EAAMC,SAgC+BC,UAAW,CAAC,QAASD,QAAQ,EAAxE,SACE,wBAAQX,UAAU,MAAlB,sBAGF,mBAAGa,KAAMnB,EAAMoB,UAAQ,EAAvB,2BAIA,wBAAQC,QAASC,QAAQC,IAAI,MAA7B,+BC1ESC,MANf,WACE,OACE,cAAC,EAAD,KCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.c0afb626.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport TextField from \"@material-ui/core/TextField\";\nimport RaisedButton from \"@material-ui/core/Button\";\n\nimport ReactFileReader from \"react-file-reader\";\n\nconst pageStyles = makeStyles((theme) => ({\n  root: {\n    height: \"20vw\",\n    width: \"20vw\",\n  },\n}));\n\nfunction PopupPage(props) {\n  const classes = pageStyles();\n\n  let [name, setName] = React.useState(null);\n  let [email, setEmail] = React.useState(null);\n  let [file, setFile] = React.useState(null);\n\n  let [ics, setIcs] = React.useState(null);\n\n  const onChangeHandler = (event) => {\n    const { name, value } = event.currentTarget;\n\n    if (name === \"userName\") {\n      setName(value);\n    } else if (name === \"userEmail\") {\n      setEmail(value);\n    }\n  };\n\n  const handleCapture = ({ target }) => {\n    /*const fileReader = new FileReader();\n\n    fileReader.readAsDataURL(target.files[0]);\n    fileReader.onload = (e) => {\n        setFile(e.target.result)\n    };*/\n  };\n\n  const handleFiles = files => {\n    setFile(files.base64);\n  }\n\n  return (\n    <div className={classes.root}>\n      <TextField\n        id=\"outlined-basic\"\n        label=\"Name\"\n        variant=\"outlined\"\n        name=\"userName\"\n        value={name}\n        onChange={(event) => onChangeHandler(event)}\n        className=\"login__form__textinput\"\n        style={{ display: \"flex\", margin: \"1vw auto 0vw auto\" }}\n      />\n      <TextField\n        id=\"outlined-basic\"\n        label=\"Email\"\n        variant=\"outlined\"\n        name=\"userEmail\"\n        value={email}\n        onChange={(event) => onChangeHandler(event)}\n        className=\"login__form__textinput\"\n        style={{ display: \"flex\", margin: \"1vw auto 0vw auto\" }}\n      />\n      {/*<RaisedButton\n        containerElement=\"label\" // <-- Just add me!\n        label=\"Upload File\"\n      >\n        <input type=\"file\" onChange={handleCapture} accept=\"application/pdf\"  />\n      </RaisedButton>*/}\n\n      <ReactFileReader handleFiles={handleFiles} fileTypes={[\".pdf\"]} base64={true}>\n        <button className=\"btn\">Upload</button>\n      </ReactFileReader>\n\n      <a href={file} download>\n        Download File\n      </a>\n\n      <button onClick={console.log(\"hi\")}>lajglajglkajg</button>\n    </div>\n  );\n}\n\nexport default PopupPage;\n","import React from 'react';\nimport Test from \"./Test\";\nimport PopupPage from './popup/index';\n\nfunction App() {\n  return (\n    <PopupPage />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/styles.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}